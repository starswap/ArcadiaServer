{% extends "appbase.jinja2" %}

{% block header%}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
crossorigin=""/>
<!-- Make sure you put this AFTER Leaflet's CSS -->
<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
crossorigin=""></script>   

<script src="https://cdn.jsdelivr.net/npm/leaflet-arrowheads@1.4.0/src/leaflet-arrowheads.js"></script>
<script src="https://cdn.jsdelivr.net/npm/leaflet-geometryutil@0.10.1/src/leaflet.geometryutil.js"></script>
{% endblock %}


{% block main %}

<div id="central" style="display:flex;flex-direction:column;justify-content:center;height:100%;">
    <div id="map" style="flex-grow:2;margin-right: 15px;margin-left:15px; ">
    </div>
    <p id="choose" style="text-align:center; margin: 10px 10px 10px 10px;">First choose an arcade to naviagate to.</p>
    <button id="guessButton" onclick="makeGuess()" style="display:none;margin: 0px 10px 10px 10px;">Make Guess</button>
</div>

<script>

var userMarker = false;
var map;

var circles = []
function getCookieDict() {
    let cookies = {}
    document.cookie.split(";").map((a) => {
        cookies[a.trim().split("=")[0]] = a.trim().split("=")[1]
    })
    return cookies
}

function circleClick(event) {
    let cookies = getCookieDict()
    if (cookies["chosen"]) {
        //User has already made a choice
        //We use cookies to ensure guesses persist over reload
    }
    else {
        let circle = event.target
        document.cookie = "poilat="+circle.poilat.toString();
        document.cookie = "poilong="+circle.poilat.toString();
        document.cookie = "chosen=true";        
        document.getElementById("guessButton").style.display = "block";
        document.getElementById("choose").innerHTML = "";

    }
}

function makeCircle(circleDetails) {
    let circle = L.circle([circleDetails.circlelat, circleDetails.circlelong], {
        color: 'red',
        fillColor: '#f03',
        fillOpacity: 0.5,
        radius: circleDetails.radius
    }).addTo(map).on("click", circleClick);
    circle.poilat = circleDetails.poilat
    circle.poilong = circleDetails.poilong
    circles.push(circle)
}

function getUserLocation(fnOf) { 
  //Gets access to the user's location via the geolocation API, and pans the map to where they are, before requesting current circles from the api.
  if (navigator.geolocation) { //Geolocation
    navigator.geolocation.getCurrentPosition(CoordObject => {
        let userCoords = {"lat":CoordObject.coords.latitude,"lon":CoordObject.coords.longitude}
        fnOf(userCoords)
    })
  }
  else { //No geolocation available
    alert("Unfortunately you can't play Arcadia on this device because your browser does not support GPS; try installing the latest version of Google Chrome or enabling the location permission.")
  }

}

function getCircles(coords) {
    fetch("{{url_for("api_bp.find_games")}}", {
        method : "POST",
        body: JSON.stringify({
            userlat: coords["lat"],
            userlong: coords["lon"]
            })
    })
    .then((response) => response.json())
    .then( (data) => {
        data["locations"].map(makeCircle)
    })
}

function updateUserPosn(coords) {
    if (!userMarker) {
        let myLatLng = new L.LatLng(coords["lat"], coords["lon"]);
        userMarker = new L.marker(coords).addTo(map);
        map.panTo(myLatLng);    
    }
    else {
        let myLatLng = new L.LatLng(coords["lat"], coords["lon"]);
        userMarker.setLatLng(myLatLng)
        map.panTo(myLatLng);    
    }    
}



function guess() {
       
}


//On loadup
//Create a leaflet map object with map tiles
map = L.map('map').setView([51.505, -0.09], 13);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

getUserLocation(
    (userCoords) => {
        getCircles(userCoords) //display circles 
        updateUserPosn(userCoords) //show pin
    }
)

function update() {
    getUserLocation(
    (userCoords) => {
        updateUserPosn(userCoords) //show pin
    }
)
}
setInterval(update,2000) //update location every 2000

let cookies = getCookieDict()
if (cookies["chosen"]) {
    document.getElementById("guessButton").style.display = "block";
    document.getElementById("choose").innerHTML = "";

}
else {
    document.getElementById("guessButton").style.display = "none";
    document.getElementById("choose").style.display = "block";    
}




</script>

<script>

</script>

{% endblock %}